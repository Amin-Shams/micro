
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ca  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000005ca  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800078  00800078  00000696  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00000710  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001032  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000745  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000076d  00000000  00000000  00001f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000138  00000000  00000000  0000268c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003f7  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009f7  00000000  00000000  00002bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  000035b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  8a:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <passwordCheck>:
unsigned int wrongpass = 1;

unsigned char passChanging = '0';

unsigned char passwordCheck()
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	c8 e7       	ldi	r28, 0x78	; 120
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	0f 2e       	mov	r0, r31
  aa:	f0 e8       	ldi	r31, 0x80	; 128
  ac:	cf 2e       	mov	r12, r31
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	df 2e       	mov	r13, r31
  b2:	f0 2d       	mov	r31, r0
	for ( int j = 0 ; j<8 ; j++ )
	{
		if ( inPass [j] != eeprom_read_byte(&password[j]) )
  b4:	f9 90       	ld	r15, Y+
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 ce 02 	call	0x59c	; 0x59c <eeprom_read_byte>
  bc:	f8 12       	cpse	r15, r24
  be:	07 c0       	rjmp	.+14     	; 0xce <passwordCheck+0x3c>
  c0:	0f 5f       	subi	r16, 0xFF	; 255
  c2:	1f 4f       	sbci	r17, 0xFF	; 255

unsigned char passChanging = '0';

unsigned char passwordCheck()
{
	for ( int j = 0 ; j<8 ; j++ )
  c4:	cc 15       	cp	r28, r12
  c6:	dd 05       	cpc	r29, r13
  c8:	a9 f7       	brne	.-22     	; 0xb4 <passwordCheck+0x22>
	{
		if ( inPass [j] != eeprom_read_byte(&password[j]) )
			return '0';
	}
	
	return '1';
  ca:	81 e3       	ldi	r24, 0x31	; 49
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <passwordCheck+0x3e>
unsigned char passwordCheck()
{
	for ( int j = 0 ; j<8 ; j++ )
	{
		if ( inPass [j] != eeprom_read_byte(&password[j]) )
			return '0';
  ce:	80 e3       	ldi	r24, 0x30	; 48
	}
	
	return '1';
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	ff 90       	pop	r15
  da:	df 90       	pop	r13
  dc:	cf 90       	pop	r12
  de:	08 95       	ret

000000e0 <letterReader>:

unsigned char letterReader( int row )
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	2c 97       	sbiw	r28, 0x0c	; 12
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	ac 01       	movw	r20, r24
	unsigned char table [4][3] = {{'1','2','3'},
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	e3 e6       	ldi	r30, 0x63	; 99
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <letterReader+0x20>
								  {'4','5','6'},
								  {'7','8','9'},
								  {'*','0','#'}};
		
	KEY_ROW = ~(1<<row);
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	04 2e       	mov	r0, r20
 10e:	02 c0       	rjmp	.+4      	; 0x114 <letterReader+0x34>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <letterReader+0x30>
 118:	20 95       	com	r18
 11a:	2b bb       	out	0x1b, r18	; 27
	unsigned int column = (KEY_COL & 0xE0)>>5;
 11c:	99 b3       	in	r25, 0x19	; 25
	unsigned char letter;
	switch(column)
 11e:	92 95       	swap	r25
 120:	96 95       	lsr	r25
 122:	97 70       	andi	r25, 0x07	; 7
 124:	95 30       	cpi	r25, 0x05	; 5
 126:	79 f0       	breq	.+30     	; 0x146 <letterReader+0x66>
 128:	96 30       	cpi	r25, 0x06	; 6
 12a:	19 f0       	breq	.+6      	; 0x132 <letterReader+0x52>
 12c:	93 30       	cpi	r25, 0x03	; 3
 12e:	f9 f4       	brne	.+62     	; 0x16e <letterReader+0x8e>
 130:	14 c0       	rjmp	.+40     	; 0x15a <letterReader+0x7a>
			letter = 0;
			return letter;
		}
		case(6):
		{
			letter = table[row][2];
 132:	fa 01       	movw	r30, r20
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	4e 0f       	add	r20, r30
 13a:	5f 1f       	adc	r21, r31
 13c:	fe 01       	movw	r30, r28
 13e:	e4 0f       	add	r30, r20
 140:	f5 1f       	adc	r31, r21
 142:	83 81       	ldd	r24, Z+3	; 0x03
			return letter;
 144:	15 c0       	rjmp	.+42     	; 0x170 <letterReader+0x90>
		}
		case(5):
		{
			letter = table[row][1];
 146:	fa 01       	movw	r30, r20
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	4e 0f       	add	r20, r30
 14e:	5f 1f       	adc	r21, r31
 150:	fe 01       	movw	r30, r28
 152:	e4 0f       	add	r30, r20
 154:	f5 1f       	adc	r31, r21
 156:	82 81       	ldd	r24, Z+2	; 0x02
			return letter;
 158:	0b c0       	rjmp	.+22     	; 0x170 <letterReader+0x90>
		}
		case(3):
		{
			letter = table[row][0];
 15a:	fa 01       	movw	r30, r20
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	4e 0f       	add	r20, r30
 162:	5f 1f       	adc	r21, r31
 164:	fe 01       	movw	r30, r28
 166:	e4 0f       	add	r30, r20
 168:	f5 1f       	adc	r31, r21
 16a:	81 81       	ldd	r24, Z+1	; 0x01
			return letter;
 16c:	01 c0       	rjmp	.+2      	; 0x170 <letterReader+0x90>
	switch(column)
	{
		case(7):
		{
			letter = 0;
			return letter;
 16e:	80 e0       	ldi	r24, 0x00	; 0
			letter = table[row][0];
			return letter;
		}
	}
	return 0;
}
 170:	2c 96       	adiw	r28, 0x0c	; 12
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <lcdCommand>:

void lcdCommand( unsigned char cmd )
{
	LCD_OUT = cmd;
 182:	88 bb       	out	0x18, r24	; 24
	ETC_OUT = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcdCommand+0x8>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcdCommand+0xe>
	_delay_us(1);
	ETC_OUT = 0;
 190:	12 ba       	out	0x12, r1	; 18
 192:	87 ec       	ldi	r24, 0xC7	; 199
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcdCommand+0x14>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcdCommand+0x1a>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <lcdInit>:
	_delay_us(100);
}

void lcdInit()
{
	ETC_DDR = 0x0F;
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	81 bb       	out	0x11, r24	; 17
	LCD_DDR = 0xFF;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	87 bb       	out	0x17, r24	; 23
	ETC_OUT = 0x00;
 1a8:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	8f ec       	ldi	r24, 0xCF	; 207
 1ac:	97 e0       	ldi	r25, 0x07	; 7
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcdInit+0xe>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcdInit+0x14>
 1b4:	00 00       	nop
	_delay_ms(1);
	
	lcdCommand(0x34);
 1b6:	84 e3       	ldi	r24, 0x34	; 52
 1b8:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
	lcdCommand(0x0F);
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
	lcdCommand(0x01);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
 1c8:	8f ec       	ldi	r24, 0xCF	; 207
 1ca:	97 e0       	ldi	r25, 0x07	; 7
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcdInit+0x2c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcdInit+0x32>
 1d2:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x06);
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
 1da:	08 95       	ret

000001dc <lcdType>:
}

void lcdType( unsigned char letter )
{
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	1f 92       	push	r1
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	89 83       	std	Y+1, r24	; 0x01
	if ( letter == '*' )
 1f0:	18 2f       	mov	r17, r24
 1f2:	8a 32       	cpi	r24, 0x2A	; 42
 1f4:	31 f5       	brne	.+76     	; 0x242 <lcdType+0x66>
	{
		if (strlen(inPass) == 0)
 1f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1fa:	81 11       	cpse	r24, r1
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <lcdType+0x2a>
		{
			lcdCommand(2);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
			return;
 204:	90 c0       	rjmp	.+288    	; 0x326 <lcdType+0x14a>
		}
			
		inPass[strlen(inPass)-1] = '\0';
 206:	e8 e7       	ldi	r30, 0x78	; 120
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	01 90       	ld	r0, Z+
 20c:	00 20       	and	r0, r0
 20e:	e9 f7       	brne	.-6      	; 0x20a <lcdType+0x2e>
 210:	32 97       	sbiw	r30, 0x02	; 2
 212:	10 82       	st	Z, r1
		lcdCommand(0x10);
 214:	80 e1       	ldi	r24, 0x10	; 16
 216:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		LCD_OUT = 0x20;
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	88 bb       	out	0x18, r24	; 24
		ETC_OUT = 0x05;
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	22 e0       	ldi	r18, 0x02	; 2
 224:	2a 95       	dec	r18
 226:	f1 f7       	brne	.-4      	; 0x224 <lcdType+0x48>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcdType+0x4e>
		_delay_us(1);
		ETC_OUT = 0x04;
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	87 ec       	ldi	r24, 0xC7	; 199
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcdType+0x56>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcdType+0x5c>
 238:	00 00       	nop
		_delay_us(100);
		lcdCommand(0x10);
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		return;
 240:	72 c0       	rjmp	.+228    	; 0x326 <lcdType+0x14a>
	}
	else if ( letter == '#' )
 242:	83 32       	cpi	r24, 0x23	; 35
 244:	09 f0       	breq	.+2      	; 0x248 <lcdType+0x6c>
 246:	51 c0       	rjmp	.+162    	; 0x2ea <lcdType+0x10e>
	{
		lcdCommand(1);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		lcdCommand(2);
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		
		if (wrongpass == 3)
 254:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <wrongpass>
 258:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <wrongpass+0x1>
 25c:	03 97       	sbiw	r24, 0x03	; 3
 25e:	09 f0       	breq	.+2      	; 0x262 <lcdType+0x86>
 260:	5d c0       	rjmp	.+186    	; 0x31c <lcdType+0x140>
		{
			PORTC |= 1;
 262:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	9f ef       	ldi	r25, 0xFF	; 255
 266:	a0 e7       	ldi	r26, 0x70	; 112
 268:	b2 e0       	ldi	r27, 0x02	; 2
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	a0 40       	sbci	r26, 0x00	; 0
 26e:	b0 40       	sbci	r27, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <lcdType+0x8e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcdType+0x98>
 274:	00 00       	nop
			_delay_ms(100);
			PORTC &= 0;
 276:	85 b3       	in	r24, 0x15	; 21
 278:	15 ba       	out	0x15, r1	; 21
			wrongpass = 0;
 27a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <wrongpass+0x1>
 27e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <wrongpass>
		}
		
		if ( passwordCheck() == '1')
 282:	0e 94 49 00 	call	0x92	; 0x92 <passwordCheck>
 286:	81 33       	cpi	r24, 0x31	; 49
 288:	f9 f4       	brne	.+62     	; 0x2c8 <lcdType+0xec>
 28a:	00 e0       	ldi	r16, 0x00	; 0
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	0f 2e       	mov	r0, r31
 290:	f8 e0       	ldi	r31, 0x08	; 8
 292:	ef 2e       	mov	r14, r31
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ff 2e       	mov	r15, r31
 298:	f0 2d       	mov	r31, r0
		{
			for ( int j = 0 ; j<8 ; j++)
			{
				lcdType( eeprom_read_byte(&password[j]) );
 29a:	c8 01       	movw	r24, r16
 29c:	0e 94 ce 02 	call	0x59c	; 0x59c <eeprom_read_byte>
 2a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcdType>
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
			wrongpass = 0;
		}
		
		if ( passwordCheck() == '1')
		{
			for ( int j = 0 ; j<8 ; j++)
 2a8:	0e 15       	cp	r16, r14
 2aa:	1f 05       	cpc	r17, r15
 2ac:	b1 f7       	brne	.-20     	; 0x29a <lcdType+0xbe>
			{
				lcdType( eeprom_read_byte(&password[j]) );
			}
			ETC_OUT = 0x0C;
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	82 bb       	out	0x12, r24	; 18
			wrongpass = 0;
 2b2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <wrongpass+0x1>
 2b6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <wrongpass>
			login = 1;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <login+0x1>
 2c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <login>
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <lcdType+0xfe>
		}
		
		else
		{
			wrongpass++;
 2c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <wrongpass>
 2cc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <wrongpass+0x1>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <wrongpass+0x1>
 2d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <wrongpass>
		}
		memset(inPass,'\0',sizeof(inPass));
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	e8 e7       	ldi	r30, 0x78	; 120
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	df 01       	movw	r26, r30
 2e2:	1d 92       	st	X+, r1
 2e4:	8a 95       	dec	r24
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <lcdType+0x106>
		return;
 2e8:	1e c0       	rjmp	.+60     	; 0x326 <lcdType+0x14a>
	}
	else
	{
		strncat(inPass,&letter,1);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	be 01       	movw	r22, r28
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	88 e7       	ldi	r24, 0x78	; 120
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 be 02 	call	0x57c	; 0x57c <strncat>
		LCD_OUT = letter;
 2fc:	18 bb       	out	0x18, r17	; 24
		ETC_OUT = 0x05;
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	b2 e0       	ldi	r27, 0x02	; 2
 304:	ba 95       	dec	r27
 306:	f1 f7       	brne	.-4      	; 0x304 <lcdType+0x128>
 308:	00 c0       	rjmp	.+0      	; 0x30a <lcdType+0x12e>
		_delay_us(1);
		ETC_OUT = 0x04;
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	82 bb       	out	0x12, r24	; 18
 30e:	87 ec       	ldi	r24, 0xC7	; 199
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <lcdType+0x136>
 316:	00 c0       	rjmp	.+0      	; 0x318 <lcdType+0x13c>
 318:	00 00       	nop
 31a:	05 c0       	rjmp	.+10     	; 0x326 <lcdType+0x14a>
			_delay_ms(100);
			PORTC &= 0;
			wrongpass = 0;
		}
		
		if ( passwordCheck() == '1')
 31c:	0e 94 49 00 	call	0x92	; 0x92 <passwordCheck>
 320:	81 33       	cpi	r24, 0x31	; 49
 322:	91 f6       	brne	.-92     	; 0x2c8 <lcdType+0xec>
 324:	b2 cf       	rjmp	.-156    	; 0x28a <lcdType+0xae>
		ETC_OUT = 0x05;
		_delay_us(1);
		ETC_OUT = 0x04;
		_delay_us(100);
	}
}
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <lcdPassType>:

void lcdPassType( unsigned char letter )
{
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	1f 92       	push	r1
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	89 83       	std	Y+1, r24	; 0x01
	if ( letter == '*' )
 34e:	18 2f       	mov	r17, r24
 350:	8a 32       	cpi	r24, 0x2A	; 42
 352:	31 f5       	brne	.+76     	; 0x3a0 <lcdPassType+0x6a>
	{
		if (strlen(inPass) == 0)
 354:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 358:	81 11       	cpse	r24, r1
 35a:	04 c0       	rjmp	.+8      	; 0x364 <lcdPassType+0x2e>
		{
			lcdCommand(2);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
			return;
 362:	62 c0       	rjmp	.+196    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		}
		
		inPass[strlen(inPass)-1] = '\0';
 364:	e8 e7       	ldi	r30, 0x78	; 120
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	01 90       	ld	r0, Z+
 36a:	00 20       	and	r0, r0
 36c:	e9 f7       	brne	.-6      	; 0x368 <lcdPassType+0x32>
 36e:	32 97       	sbiw	r30, 0x02	; 2
 370:	10 82       	st	Z, r1
		lcdCommand(0x10);
 372:	80 e1       	ldi	r24, 0x10	; 16
 374:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		LCD_OUT = 0x20;
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	88 bb       	out	0x18, r24	; 24
		ETC_OUT = 0x05;
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	82 bb       	out	0x12, r24	; 18
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <lcdPassType+0x4c>
 386:	00 c0       	rjmp	.+0      	; 0x388 <lcdPassType+0x52>
		_delay_us(1);
		ETC_OUT = 0x04;
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	82 bb       	out	0x12, r24	; 18
 38c:	a7 ec       	ldi	r26, 0xC7	; 199
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	11 97       	sbiw	r26, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <lcdPassType+0x5a>
 394:	00 c0       	rjmp	.+0      	; 0x396 <lcdPassType+0x60>
 396:	00 00       	nop
		_delay_us(100);
		lcdCommand(0x10);
 398:	80 e1       	ldi	r24, 0x10	; 16
 39a:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		return;
 39e:	44 c0       	rjmp	.+136    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	}
	else if ( letter == '#' )
 3a0:	83 32       	cpi	r24, 0x23	; 35
 3a2:	51 f5       	brne	.+84     	; 0x3f8 <lcdPassType+0xc2>
	{
		lcdCommand(1);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
		lcdCommand(2);
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
 3b0:	0f 2e       	mov	r0, r31
 3b2:	f8 e7       	ldi	r31, 0x78	; 120
 3b4:	ef 2e       	mov	r14, r31
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ff 2e       	mov	r15, r31
 3ba:	f0 2d       	mov	r31, r0
 3bc:	00 e0       	ldi	r16, 0x00	; 0
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f0 e8       	ldi	r31, 0x80	; 128
 3c4:	cf 2e       	mov	r12, r31
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	df 2e       	mov	r13, r31
 3ca:	f0 2d       	mov	r31, r0
		
		for ( int j = 0 ; j<8 ; j++)
		{
			eeprom_write_byte(&password[j],inPass[j]);
 3cc:	f7 01       	movw	r30, r14
 3ce:	61 91       	ld	r22, Z+
 3d0:	7f 01       	movw	r14, r30
 3d2:	c8 01       	movw	r24, r16
 3d4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <eeprom_write_byte>
 3d8:	0f 5f       	subi	r16, 0xFF	; 255
 3da:	1f 4f       	sbci	r17, 0xFF	; 255
	else if ( letter == '#' )
	{
		lcdCommand(1);
		lcdCommand(2);
		
		for ( int j = 0 ; j<8 ; j++)
 3dc:	ec 14       	cp	r14, r12
 3de:	fd 04       	cpc	r15, r13
 3e0:	a9 f7       	brne	.-22     	; 0x3cc <lcdPassType+0x96>
		{
			eeprom_write_byte(&password[j],inPass[j]);
		}
		
		memset(inPass,'\0',sizeof(inPass));
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	e8 e7       	ldi	r30, 0x78	; 120
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	df 01       	movw	r26, r30
 3ea:	1d 92       	st	X+, r1
 3ec:	8a 95       	dec	r24
 3ee:	e9 f7       	brne	.-6      	; 0x3ea <lcdPassType+0xb4>
		passChanging = '0';
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		return;
 3f6:	18 c0       	rjmp	.+48     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	}
	else
	{
		strncat(inPass,&letter,1);
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	88 e7       	ldi	r24, 0x78	; 120
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 be 02 	call	0x57c	; 0x57c <strncat>
		LCD_OUT = letter;
 40a:	18 bb       	out	0x18, r17	; 24
		ETC_OUT = 0x05;
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	82 bb       	out	0x12, r24	; 18
 410:	b2 e0       	ldi	r27, 0x02	; 2
 412:	ba 95       	dec	r27
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		_delay_us(1);
		ETC_OUT = 0x04;
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	82 bb       	out	0x12, r24	; 18
 41c:	e7 ec       	ldi	r30, 0xC7	; 199
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
		_delay_us(100);
	}
}
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	08 95       	ret

0000043c <changePassword>:
void changePassword()
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
	unsigned char letter;
	
	passChanging = '1';
 440:	81 e3       	ldi	r24, 0x31	; 49
 442:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 446:	14 c0       	rjmp	.+40     	; 0x470 <changePassword+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	8f ed       	ldi	r24, 0xDF	; 223
 44a:	9e e2       	ldi	r25, 0x2E	; 46
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <changePassword+0x10>
 450:	00 c0       	rjmp	.+0      	; 0x452 <changePassword+0x16>
 452:	00 00       	nop
	while (passChanging == '1')
	{
		for ( int i = 0 ; i < 4 ; i++ )
		{
			_delay_ms(6);
			letter = letterReader(i);
 454:	ce 01       	movw	r24, r28
 456:	0e 94 70 00 	call	0xe0	; 0xe0 <letterReader>
			if(letter != 0)
 45a:	81 11       	cpse	r24, r1
				lcdPassType(letter);
 45c:	0e 94 9b 01 	call	0x336	; 0x336 <lcdPassType>
	
	passChanging = '1';
	
	while (passChanging == '1')
	{
		for ( int i = 0 ; i < 4 ; i++ )
 460:	21 96       	adiw	r28, 0x01	; 1
 462:	c4 30       	cpi	r28, 0x04	; 4
 464:	d1 05       	cpc	r29, r1
 466:	81 f7       	brne	.-32     	; 0x448 <changePassword+0xc>
{
	unsigned char letter;
	
	passChanging = '1';
	
	while (passChanging == '1')
 468:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 46c:	81 33       	cpi	r24, 0x31	; 49
 46e:	19 f4       	brne	.+6      	; 0x476 <changePassword+0x3a>
		ETC_OUT = 0x04;
		_delay_us(100);
	}
}
void changePassword()
{
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	d0 e0       	ldi	r29, 0x00	; 0
 474:	e9 cf       	rjmp	.-46     	; 0x448 <changePassword+0xc>
			letter = letterReader(i);
			if(letter != 0)
				lcdPassType(letter);
		}
	}
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <main>:

int main(void)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	28 97       	sbiw	r28, 0x08	; 8
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x01;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	84 bb       	out	0x14, r24	; 20
	ETC_OUT =0x0F;
 494:	8f e0       	ldi	r24, 0x0F	; 15
 496:	82 bb       	out	0x12, r24	; 18
	
	KEY_DDR = 0x1F;
 498:	8f e1       	ldi	r24, 0x1F	; 31
 49a:	8a bb       	out	0x1a, r24	; 26
	lcdInit();
 49c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdInit>
	unsigned char letter;
	
	unsigned char defpass[8] = "0000";
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	ef e6       	ldi	r30, 0x6F	; 111
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	de 01       	movw	r26, r28
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x2e>
 4b2:	fe 01       	movw	r30, r28
 4b4:	36 96       	adiw	r30, 0x06	; 6
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	df 01       	movw	r26, r30
 4ba:	1d 92       	st	X+, r1
 4bc:	8a 95       	dec	r24
 4be:	e9 f7       	brne	.-6      	; 0x4ba <main+0x3e>
 4c0:	8e 01       	movw	r16, r28
 4c2:	0f 5f       	subi	r16, 0xFF	; 255
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	0f 2e       	mov	r0, r31
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	ef 2e       	mov	r14, r31
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ff 2e       	mov	r15, r31
 4d0:	f0 2d       	mov	r31, r0
 4d2:	6e 01       	movw	r12, r28
 4d4:	b9 e0       	ldi	r27, 0x09	; 9
 4d6:	cb 0e       	add	r12, r27
 4d8:	d1 1c       	adc	r13, r1
	for ( int j = 0 ; j<8 ; j++)
	{
		eeprom_write_byte(&password[j],defpass[j]);
 4da:	f8 01       	movw	r30, r16
 4dc:	61 91       	ld	r22, Z+
 4de:	8f 01       	movw	r16, r30
 4e0:	c7 01       	movw	r24, r14
 4e2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <eeprom_write_byte>
 4e6:	ff ef       	ldi	r31, 0xFF	; 255
 4e8:	ef 1a       	sub	r14, r31
 4ea:	ff 0a       	sbc	r15, r31
	KEY_DDR = 0x1F;
	lcdInit();
	unsigned char letter;
	
	unsigned char defpass[8] = "0000";
	for ( int j = 0 ; j<8 ; j++)
 4ec:	0c 15       	cp	r16, r12
 4ee:	1d 05       	cpc	r17, r13
 4f0:	a1 f7       	brne	.-24     	; 0x4da <main+0x5e>
		eeprom_write_byte(&password[j],defpass[j]);
	}

    while (1) 
    {
		if ( login == 0 )
 4f2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <login>
 4f6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <login+0x1>
 4fa:	00 97       	sbiw	r24, 0x00	; 0
 4fc:	a1 f4       	brne	.+40     	; 0x526 <main+0xaa>
 4fe:	00 e0       	ldi	r16, 0x00	; 0
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	8f ed       	ldi	r24, 0xDF	; 223
 504:	9e e2       	ldi	r25, 0x2E	; 46
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <main+0x8a>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0x90>
 50c:	00 00       	nop
		{
			
			for ( int i = 0 ; i < 4 ; i++ )
			{
				_delay_ms(6);
				letter = letterReader(i);
 50e:	c8 01       	movw	r24, r16
 510:	0e 94 70 00 	call	0xe0	; 0xe0 <letterReader>
				if(letter != 0)
 514:	81 11       	cpse	r24, r1
					lcdType(letter);
 516:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcdType>
    while (1) 
    {
		if ( login == 0 )
		{
			
			for ( int i = 0 ; i < 4 ; i++ )
 51a:	0f 5f       	subi	r16, 0xFF	; 255
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	04 30       	cpi	r16, 0x04	; 4
 520:	11 05       	cpc	r17, r1
 522:	79 f7       	brne	.-34     	; 0x502 <main+0x86>
 524:	e6 cf       	rjmp	.-52     	; 0x4f2 <main+0x76>
				letter = letterReader(i);
				if(letter != 0)
					lcdType(letter);
			}
		}
		else if ( login == 1 )
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	21 f7       	brne	.-56     	; 0x4f2 <main+0x76>
 52a:	00 e0       	ldi	r16, 0x00	; 0
 52c:	10 e0       	ldi	r17, 0x00	; 0
 52e:	af ed       	ldi	r26, 0xDF	; 223
 530:	be e2       	ldi	r27, 0x2E	; 46
 532:	11 97       	sbiw	r26, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <main+0xb6>
 536:	00 c0       	rjmp	.+0      	; 0x538 <main+0xbc>
 538:	00 00       	nop
		{
			for ( int i = 0 ; i < 4 ; i++ )
			{
				_delay_ms(6);
				letter = letterReader(i);
 53a:	c8 01       	movw	r24, r16
 53c:	0e 94 70 00 	call	0xe0	; 0xe0 <letterReader>
				if(letter == 0);
				if(letter == '1')
 540:	81 33       	cpi	r24, 0x31	; 49
 542:	49 f4       	brne	.+18     	; 0x556 <main+0xda>
				{
					lcdCommand(1);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
					lcdCommand(2);
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
					changePassword();
 550:	0e 94 1e 02 	call	0x43c	; 0x43c <changePassword>
 554:	0d c0       	rjmp	.+26     	; 0x570 <main+0xf4>
				}
				else if ( letter == '2')
 556:	82 33       	cpi	r24, 0x32	; 50
 558:	59 f4       	brne	.+22     	; 0x570 <main+0xf4>
				{
					login = 0;
 55a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <login+0x1>
 55e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <login>
					ETC_OUT |= (1<<3);
 562:	93 9a       	sbi	0x12, 3	; 18
					lcdCommand(1);
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
					lcdCommand(2);
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	0e 94 c1 00 	call	0x182	; 0x182 <lcdCommand>
					lcdType(letter);
			}
		}
		else if ( login == 1 )
		{
			for ( int i = 0 ; i < 4 ; i++ )
 570:	0f 5f       	subi	r16, 0xFF	; 255
 572:	1f 4f       	sbci	r17, 0xFF	; 255
 574:	04 30       	cpi	r16, 0x04	; 4
 576:	11 05       	cpc	r17, r1
 578:	d1 f6       	brne	.-76     	; 0x52e <main+0xb2>
 57a:	bb cf       	rjmp	.-138    	; 0x4f2 <main+0x76>

0000057c <strncat>:
 57c:	fb 01       	movw	r30, r22
 57e:	dc 01       	movw	r26, r24
 580:	0d 90       	ld	r0, X+
 582:	00 20       	and	r0, r0
 584:	e9 f7       	brne	.-6      	; 0x580 <strncat+0x4>
 586:	11 97       	sbiw	r26, 0x01	; 1
 588:	41 50       	subi	r20, 0x01	; 1
 58a:	50 40       	sbci	r21, 0x00	; 0
 58c:	28 f0       	brcs	.+10     	; 0x598 <strncat+0x1c>
 58e:	01 90       	ld	r0, Z+
 590:	00 20       	and	r0, r0
 592:	0d 92       	st	X+, r0
 594:	c9 f7       	brne	.-14     	; 0x588 <strncat+0xc>
 596:	08 95       	ret
 598:	1c 92       	st	X, r1
 59a:	08 95       	ret

0000059c <eeprom_read_byte>:
 59c:	e1 99       	sbic	0x1c, 1	; 28
 59e:	fe cf       	rjmp	.-4      	; 0x59c <eeprom_read_byte>
 5a0:	9f bb       	out	0x1f, r25	; 31
 5a2:	8e bb       	out	0x1e, r24	; 30
 5a4:	e0 9a       	sbi	0x1c, 0	; 28
 5a6:	99 27       	eor	r25, r25
 5a8:	8d b3       	in	r24, 0x1d	; 29
 5aa:	08 95       	ret

000005ac <eeprom_write_byte>:
 5ac:	26 2f       	mov	r18, r22

000005ae <eeprom_write_r18>:
 5ae:	e1 99       	sbic	0x1c, 1	; 28
 5b0:	fe cf       	rjmp	.-4      	; 0x5ae <eeprom_write_r18>
 5b2:	9f bb       	out	0x1f, r25	; 31
 5b4:	8e bb       	out	0x1e, r24	; 30
 5b6:	2d bb       	out	0x1d, r18	; 29
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	e2 9a       	sbi	0x1c, 2	; 28
 5be:	e1 9a       	sbi	0x1c, 1	; 28
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	08 95       	ret

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
