
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00000342  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d0b  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00001223  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045c  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e4  00000000  00000000  0000214b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000282f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 30       	cpi	r26, 0x06	; 6
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  7a:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdCommand>:



void lcdCommand( unsigned char cmd )
{
	LCD_OUT = cmd;
  82:	85 bb       	out	0x15, r24	; 21
	PORTD = 1;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	8a 95       	dec	r24
  8c:	f1 f7       	brne	.-4      	; 0x8a <lcdCommand+0x8>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <lcdCommand+0xe>
	_delay_us(1);
	PORTD = 0;
  90:	12 ba       	out	0x12, r1	; 18
  92:	87 ec       	ldi	r24, 0xC7	; 199
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcdCommand+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcdCommand+0x1a>
  9c:	00 00       	nop
  9e:	08 95       	ret

000000a0 <lcdType>:
	_delay_us(100);
}

void lcdType( unsigned char letter )
{
	LCD_OUT = letter;
  a0:	85 bb       	out	0x15, r24	; 21
	PORTD = 0b101;
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcdType+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcdType+0xe>
	_delay_us(1);
	PORTD = 0b100;
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	87 ec       	ldi	r24, 0xC7	; 199
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcdType+0x16>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcdType+0x1c>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <lcdPrint>:
	_delay_us(100);
}

void lcdPrint( unsigned char word[] )
{
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
  ce:	7c 01       	movw	r14, r24
	for ( int i = 0 ; i<strlen(word) ; i++ )
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <lcdPrint+0x22>
	{
		lcdType(word[i]);
  d6:	f7 01       	movw	r30, r14
  d8:	81 91       	ld	r24, Z+
  da:	7f 01       	movw	r14, r30
  dc:	0e 94 50 00 	call	0xa0	; 0xa0 <lcdType>
	_delay_us(100);
}

void lcdPrint( unsigned char word[] )
{
	for ( int i = 0 ; i<strlen(word) ; i++ )
  e0:	21 96       	adiw	r28, 0x01	; 1
  e2:	f8 01       	movw	r30, r16
  e4:	01 90       	ld	r0, Z+
  e6:	00 20       	and	r0, r0
  e8:	e9 f7       	brne	.-6      	; 0xe4 <lcdPrint+0x24>
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	e0 1b       	sub	r30, r16
  ee:	f1 0b       	sbc	r31, r17
  f0:	ce 17       	cp	r28, r30
  f2:	df 07       	cpc	r29, r31
  f4:	80 f3       	brcs	.-32     	; 0xd6 <lcdPrint+0x16>
	{
		lcdType(word[i]);
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	08 95       	ret

00000104 <lcdInit>:

void lcdInit()
{
	DDRD = 0x07;
 104:	87 e0       	ldi	r24, 0x07	; 7
 106:	81 bb       	out	0x11, r24	; 17
	LCD_DDR = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	84 bb       	out	0x14, r24	; 20
	PORTD = 0;
 10c:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f ec       	ldi	r24, 0xCF	; 207
 110:	97 e0       	ldi	r25, 0x07	; 7
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcdInit+0xe>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcdInit+0x14>
 118:	00 00       	nop
	_delay_ms(1);
	
	lcdCommand(0x38);
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	lcdCommand(0x0C);
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	lcdCommand(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 12c:	8f ec       	ldi	r24, 0xCF	; 207
 12e:	97 e0       	ldi	r25, 0x07	; 7
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcdInit+0x2c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcdInit+0x32>
 136:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x06);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 13e:	08 95       	ret

00000140 <lcdLogin>:
}

void lcdLogin()
{
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	c5 5a       	subi	r28, 0xA5	; 165
 14e:	d1 09       	sbc	r29, r1
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
	PORTB |= (1<<1);
 15a:	c1 9a       	sbi	0x18, 1	; 24
	
	lcdCommand(1);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	lcdCommand(2);
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	
	unsigned char name1[] = "Mohammad Javad Rahimi   40009153";
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	de 01       	movw	r26, r28
 170:	11 96       	adiw	r26, 0x01	; 1
 172:	01 90       	ld	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	8a 95       	dec	r24
 178:	e1 f7       	brne	.-8      	; 0x172 <lcdLogin+0x32>
	lcdPrint(name1);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdPrint>
 182:	2f e7       	ldi	r18, 0x7F	; 127
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <lcdLogin+0x48>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcdLogin+0x52>
 192:	00 00       	nop
 194:	07 e2       	ldi	r16, 0x27	; 39
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	8f e2       	ldi	r24, 0x2F	; 47
 19a:	95 e7       	ldi	r25, 0x75	; 117
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcdLogin+0x5c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcdLogin+0x62>
 1a2:	00 00       	nop
	_delay_ms(50);
	
	for ( int i = 0 ; i < 39 ; i++ )
	{
		_delay_ms(15);
		lcdCommand(0x18);
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 1aa:	01 50       	subi	r16, 0x01	; 1
 1ac:	11 09       	sbc	r17, r1
	unsigned char name1[] = "Mohammad Javad Rahimi   40009153";
	lcdPrint(name1);
	
	_delay_ms(50);
	
	for ( int i = 0 ; i < 39 ; i++ )
 1ae:	a1 f7       	brne	.-24     	; 0x198 <lcdLogin+0x58>
	{
		_delay_ms(15);
		lcdCommand(0x18);
	}

	lcdCommand(1);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 1b6:	9f e7       	ldi	r25, 0x7F	; 127
 1b8:	28 e3       	ldi	r18, 0x38	; 56
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	91 50       	subi	r25, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <lcdLogin+0x7c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcdLogin+0x86>
 1c6:	00 00       	nop
	_delay_ms(50);
	lcdCommand(2);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	
	
	lcdCommand(0x00);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	unsigned char name2[] = "Mohammad Amin Shams     40011223";
 1d4:	81 e2       	ldi	r24, 0x21	; 33
 1d6:	e1 e8       	ldi	r30, 0x81	; 129
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	de 01       	movw	r26, r28
 1dc:	92 96       	adiw	r26, 0x22	; 34
 1de:	01 90       	ld	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	8a 95       	dec	r24
 1e4:	e1 f7       	brne	.-8      	; 0x1de <lcdLogin+0x9e>
	lcdPrint(name2);
 1e6:	ce 01       	movw	r24, r28
 1e8:	82 96       	adiw	r24, 0x22	; 34
 1ea:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdPrint>
 1ee:	9f e7       	ldi	r25, 0x7F	; 127
 1f0:	28 e3       	ldi	r18, 0x38	; 56
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	91 50       	subi	r25, 0x01	; 1
 1f6:	20 40       	sbci	r18, 0x00	; 0
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <lcdLogin+0xb4>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcdLogin+0xbe>
 1fe:	00 00       	nop
 200:	07 e2       	ldi	r16, 0x27	; 39
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	8f e2       	ldi	r24, 0x2F	; 47
 206:	95 e7       	ldi	r25, 0x75	; 117
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcdLogin+0xc8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcdLogin+0xce>
 20e:	00 00       	nop
	_delay_ms(50);
	
	for ( int i = 0 ; i < 39 ; i++ )
	{
		_delay_ms(15);
		lcdCommand(0x18);
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 216:	01 50       	subi	r16, 0x01	; 1
 218:	11 09       	sbc	r17, r1
	unsigned char name2[] = "Mohammad Amin Shams     40011223";
	lcdPrint(name2);
	
	_delay_ms(50);
	
	for ( int i = 0 ; i < 39 ; i++ )
 21a:	a1 f7       	brne	.-24     	; 0x204 <lcdLogin+0xc4>
	{
		_delay_ms(15);
		lcdCommand(0x18);
	}
		
	lcdCommand(1);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 222:	9f e7       	ldi	r25, 0x7F	; 127
 224:	28 e3       	ldi	r18, 0x38	; 56
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	91 50       	subi	r25, 0x01	; 1
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <lcdLogin+0xe8>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcdLogin+0xf2>
 232:	00 00       	nop
	_delay_ms(50);
	lcdCommand(2);
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	
	unsigned char line1[] = "                1) Change Password                 ";
 23a:	84 e3       	ldi	r24, 0x34	; 52
 23c:	e2 ea       	ldi	r30, 0xA2	; 162
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	de 01       	movw	r26, r28
 242:	ad 5b       	subi	r26, 0xBD	; 189
 244:	bf 4f       	sbci	r27, 0xFF	; 255
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <lcdLogin+0x106>
	lcdPrint(line1);
 24e:	ce 01       	movw	r24, r28
 250:	8d 5b       	subi	r24, 0xBD	; 189
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdPrint>
	
	lcdCommand(0xC0);
 258:	80 ec       	ldi	r24, 0xC0	; 192
 25a:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	unsigned char line2[] = "                2) Log out                    ";
 25e:	8f e2       	ldi	r24, 0x2F	; 47
 260:	e6 ed       	ldi	r30, 0xD6	; 214
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	de 01       	movw	r26, r28
 266:	a9 58       	subi	r26, 0x89	; 137
 268:	bf 4f       	sbci	r27, 0xFF	; 255
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <lcdLogin+0x12a>
	lcdPrint(line2);
 272:	ce 01       	movw	r24, r28
 274:	89 58       	subi	r24, 0x89	; 137
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	0e 94 60 00 	call	0xc0	; 0xc0 <lcdPrint>
}
 27c:	cb 55       	subi	r28, 0x5B	; 91
 27e:	df 4f       	sbci	r29, 0xFF	; 255
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <options>:

void options()
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	2f e7       	ldi	r18, 0x7F	; 127
 29a:	88 e3       	ldi	r24, 0x38	; 56
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <options+0xa>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <options+0x14>
 2a8:	00 00       	nop
 2aa:	c7 e2       	ldi	r28, 0x27	; 39
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9c e9       	ldi	r25, 0x9C	; 156
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <options+0x1e>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <options+0x24>
 2b8:	00 00       	nop
	_delay_ms(50);
	
	for ( int i = 0 ; i < 39 ; i++ )
	{
		_delay_ms(20);
		lcdCommand(0x18);
 2ba:	88 e1       	ldi	r24, 0x18	; 24
 2bc:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 2c0:	21 97       	sbiw	r28, 0x01	; 1
void options()
{
	
	_delay_ms(50);
	
	for ( int i = 0 ; i < 39 ; i++ )
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <options+0x1a>
	{
		_delay_ms(20);
		lcdCommand(0x18);
	}
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <main>:

int main(void)
{
	lcdInit();
 2ca:	0e 94 82 00 	call	0x104	; 0x104 <lcdInit>
	Micro_DDR = 0xFF;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	8a bb       	out	0x1a, r24	; 26
	
	DDRB = 2;
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
			if ((PINB&(1)) == 1)
 2d6:	b0 9b       	sbis	0x16, 0	; 22
 2d8:	1c c0       	rjmp	.+56     	; 0x312 <main+0x48>
			{
				lcdLogin();
 2da:	0e 94 a0 00 	call	0x140	; 0x140 <lcdLogin>
				options();
 2de:	0e 94 4a 01 	call	0x294	; 0x294 <options>
				if ( (PINB&(1)) == 0 )
 2e2:	b0 99       	sbic	0x16, 0	; 22
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <main+0x48>
 2e6:	18 c0       	rjmp	.+48     	; 0x318 <main+0x4e>
				}
			}
				
			while ((PINB&(1)) == 1)
			{
				options();
 2e8:	0e 94 4a 01 	call	0x294	; 0x294 <options>
				if ( (PINB&(1)) == 0 )
 2ec:	b0 99       	sbic	0x16, 0	; 22
 2ee:	11 c0       	rjmp	.+34     	; 0x312 <main+0x48>
					{
						lcdCommand(1);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 2f6:	2f e7       	ldi	r18, 0x7F	; 127
 2f8:	88 e3       	ldi	r24, 0x38	; 56
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x32>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x3c>
 306:	00 00       	nop
						_delay_ms(50);
						lcdCommand(2);
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
						PORTB = 0x00;
 30e:	18 ba       	out	0x18, r1	; 24
						break;
 310:	e2 cf       	rjmp	.-60     	; 0x2d6 <main+0xc>
					PORTB = 0x00;
					break;
				}
			}
				
			while ((PINB&(1)) == 1)
 312:	b0 99       	sbic	0x16, 0	; 22
 314:	e9 cf       	rjmp	.-46     	; 0x2e8 <main+0x1e>
 316:	df cf       	rjmp	.-66     	; 0x2d6 <main+0xc>
			{
				lcdLogin();
				options();
				if ( (PINB&(1)) == 0 )
				{
					lcdCommand(1);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 31e:	2f e7       	ldi	r18, 0x7F	; 127
 320:	88 e3       	ldi	r24, 0x38	; 56
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x5a>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x64>
 32e:	00 00       	nop
					_delay_ms(50);
					lcdCommand(2);
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
					PORTB = 0x00;
 336:	18 ba       	out	0x18, r1	; 24
						PORTB = 0x00;
						break;
					}
			}
    }
}
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
