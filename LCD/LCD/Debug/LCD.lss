
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090d  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038d  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcdCommand>:
{
	for ( int i = 0 ; i<strlen(word) ; i++ )
	{
		lcdType(word[i]);
	}
}
  6c:	85 bb       	out	0x15, r24	; 21
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	82 bb       	out	0x12, r24	; 18
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <lcdCommand+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <lcdCommand+0xe>
  7a:	12 ba       	out	0x12, r1	; 18
  7c:	87 ec       	ldi	r24, 0xC7	; 199
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <lcdCommand+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <lcdCommand+0x1a>
  86:	00 00       	nop
  88:	08 95       	ret

0000008a <lcdType>:
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	82 bb       	out	0x12, r24	; 18
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <lcdType+0x8>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcdType+0xe>
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	87 ec       	ldi	r24, 0xC7	; 199
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcdType+0x16>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcdType+0x1c>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <lcdInit>:

void lcdInit()
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	DDRD = 0x07;
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	81 bb       	out	0x11, r24	; 17
	LCD_DDR = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 bb       	out	0x14, r24	; 20
	PORTD = 0;
  b6:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdInit+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdInit+0x18>
  c2:	00 00       	nop
	_delay_ms(1);
	
	lcdCommand(0x38);
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <lcdCommand>
	lcdCommand(0x0C);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <lcdCommand>
	lcdCommand(0x01);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <lcdCommand>
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	97 e0       	ldi	r25, 0x07	; 7
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcdInit+0x30>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcdInit+0x36>
  e0:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x06);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <lcdCommand>
  e8:	c0 ef       	ldi	r28, 0xF0	; 240
  ea:	df ef       	ldi	r29, 0xFF	; 255
	for ( int i = 0 ; i < 80 ; i ++ )
	{
		if( i<16 || i>=40 )
  ec:	c8 31       	cpi	r28, 0x18	; 24
  ee:	d1 05       	cpc	r29, r1
  f0:	20 f0       	brcs	.+8      	; 0xfa <lcdInit+0x50>
			lcdType(0xFF);
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	0e 94 45 00 	call	0x8a	; 0x8a <lcdType>
  f8:	03 c0       	rjmp	.+6      	; 0x100 <lcdInit+0x56>
		else
			lcdType(' ');
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	0e 94 45 00 	call	0x8a	; 0x8a <lcdType>
 100:	21 96       	adiw	r28, 0x01	; 1
	lcdCommand(0x38);
	lcdCommand(0x0C);
	lcdCommand(0x01);
	_delay_ms(1);
	lcdCommand(0x06);
	for ( int i = 0 ; i < 80 ; i ++ )
 102:	c0 34       	cpi	r28, 0x40	; 64
 104:	d1 05       	cpc	r29, r1
 106:	91 f7       	brne	.-28     	; 0xec <lcdInit+0x42>
		if( i<16 || i>=40 )
			lcdType(0xFF);
		else
			lcdType(' ');
	}
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <lcdLogin>:

void lcdLogin()
{
	lcdCommand(18);
 10e:	82 e1       	ldi	r24, 0x12	; 18
 110:	0e 94 36 00 	call	0x6c	; 0x6c <lcdCommand>
 114:	08 95       	ret

00000116 <main>:
}

int main(void)
{
	lcdInit();
 116:	0e 94 55 00 	call	0xaa	; 0xaa <lcdInit>
	
	DDRB = 0;
 11a:	17 ba       	out	0x17, r1	; 23
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	98 e1       	ldi	r25, 0x18	; 24
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0xc>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x16>
 12c:	00 00       	nop
	unsigned int login = 0;
	_delay_ms(1000);
	login = PINB;
 12e:	c6 b3       	in	r28, 0x16	; 22
	
    while (1) 
    {
		if ( login == 1 )
 130:	c1 30       	cpi	r28, 0x01	; 1
 132:	09 f0       	breq	.+2      	; 0x136 <main+0x20>
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x1e>
			lcdLogin();
 136:	0e 94 87 00 	call	0x10e	; 0x10e <lcdLogin>
 13a:	fa cf       	rjmp	.-12     	; 0x130 <main+0x1a>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
