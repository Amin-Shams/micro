
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000314  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b12  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043b  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e7  00000000  00000000  00001ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  8a:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <passwordCheck>:

unsigned char passwordCheck()
{
	for ( int j = 0 ; j<8 ; j++ )
	{
		if ( inPass [j] != password [j] )
  92:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  9a:	98 13       	cpse	r25, r24
  9c:	0f c0       	rjmp	.+30     	; 0xbc <passwordCheck+0x2a>
  9e:	e5 e7       	ldi	r30, 0x75	; 117
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	a1 e6       	ldi	r26, 0x61	; 97
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	2c e7       	ldi	r18, 0x7C	; 124
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	91 91       	ld	r25, Z+
  ac:	8d 91       	ld	r24, X+
  ae:	98 13       	cpse	r25, r24
  b0:	07 c0       	rjmp	.+14     	; 0xc0 <passwordCheck+0x2e>
unsigned char inPass[8] = "";
unsigned char empty[8] = "\0";

unsigned char passwordCheck()
{
	for ( int j = 0 ; j<8 ; j++ )
  b2:	e2 17       	cp	r30, r18
  b4:	f3 07       	cpc	r31, r19
  b6:	c9 f7       	brne	.-14     	; 0xaa <passwordCheck+0x18>
	{
		if ( inPass [j] != password [j] )
			return '0';
	}
	return '1';
  b8:	81 e3       	ldi	r24, 0x31	; 49
  ba:	08 95       	ret
unsigned char passwordCheck()
{
	for ( int j = 0 ; j<8 ; j++ )
	{
		if ( inPass [j] != password [j] )
			return '0';
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	08 95       	ret
  c0:	80 e3       	ldi	r24, 0x30	; 48
	}
	return '1';
}
  c2:	08 95       	ret

000000c4 <letterReader>:

unsigned char letterReader( int row )
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2c 97       	sbiw	r28, 0x0c	; 12
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	ac 01       	movw	r20, r24
	unsigned char table [4][3] = {{'1','2','3'},
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	e8 e6       	ldi	r30, 0x68	; 104
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	de 01       	movw	r26, r28
  e2:	11 96       	adiw	r26, 0x01	; 1
  e4:	01 90       	ld	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	8a 95       	dec	r24
  ea:	e1 f7       	brne	.-8      	; 0xe4 <letterReader+0x20>
								  {'4','5','6'},
								  {'7','8','9'},
								  {'*','0','#'}};
		
	KEY_ROW = ~(1<<row);
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	04 2e       	mov	r0, r20
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <letterReader+0x34>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <letterReader+0x30>
  fc:	20 95       	com	r18
  fe:	2b bb       	out	0x1b, r18	; 27
	unsigned int column = (KEY_COL & 0xE0)>>5;
 100:	99 b3       	in	r25, 0x19	; 25
	unsigned char letter;
	switch(column)
 102:	92 95       	swap	r25
 104:	96 95       	lsr	r25
 106:	97 70       	andi	r25, 0x07	; 7
 108:	95 30       	cpi	r25, 0x05	; 5
 10a:	79 f0       	breq	.+30     	; 0x12a <letterReader+0x66>
 10c:	96 30       	cpi	r25, 0x06	; 6
 10e:	19 f0       	breq	.+6      	; 0x116 <letterReader+0x52>
 110:	93 30       	cpi	r25, 0x03	; 3
 112:	f9 f4       	brne	.+62     	; 0x152 <letterReader+0x8e>
 114:	14 c0       	rjmp	.+40     	; 0x13e <letterReader+0x7a>
			letter = 0;
			return letter;
		}
		case(6):
		{
			letter = table[row][2];
 116:	fa 01       	movw	r30, r20
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	4e 0f       	add	r20, r30
 11e:	5f 1f       	adc	r21, r31
 120:	fe 01       	movw	r30, r28
 122:	e4 0f       	add	r30, r20
 124:	f5 1f       	adc	r31, r21
 126:	83 81       	ldd	r24, Z+3	; 0x03
			return letter;
 128:	15 c0       	rjmp	.+42     	; 0x154 <letterReader+0x90>
		}
		case(5):
		{
			letter = table[row][1];
 12a:	fa 01       	movw	r30, r20
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	4e 0f       	add	r20, r30
 132:	5f 1f       	adc	r21, r31
 134:	fe 01       	movw	r30, r28
 136:	e4 0f       	add	r30, r20
 138:	f5 1f       	adc	r31, r21
 13a:	82 81       	ldd	r24, Z+2	; 0x02
			return letter;
 13c:	0b c0       	rjmp	.+22     	; 0x154 <letterReader+0x90>
		}
		case(3):
		{
			letter = table[row][0];
 13e:	fa 01       	movw	r30, r20
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	4e 0f       	add	r20, r30
 146:	5f 1f       	adc	r21, r31
 148:	fe 01       	movw	r30, r28
 14a:	e4 0f       	add	r30, r20
 14c:	f5 1f       	adc	r31, r21
 14e:	81 81       	ldd	r24, Z+1	; 0x01
			return letter;
 150:	01 c0       	rjmp	.+2      	; 0x154 <letterReader+0x90>
	switch(column)
	{
		case(7):
		{
			letter = 0;
			return letter;
 152:	80 e0       	ldi	r24, 0x00	; 0
			letter = table[row][0];
			return letter;
		}
	}
	return 0;
}
 154:	2c 96       	adiw	r28, 0x0c	; 12
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcdCommand>:

void lcdCommand( unsigned char cmd )
{
	LCD_OUT = cmd;
 166:	88 bb       	out	0x18, r24	; 24
	ETC_OUT = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <lcdCommand+0x8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcdCommand+0xe>
	_delay_us(1);
	ETC_OUT = 0;
 174:	12 ba       	out	0x12, r1	; 18
 176:	87 ec       	ldi	r24, 0xC7	; 199
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcdCommand+0x14>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcdCommand+0x1a>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <lcdInit>:
	_delay_us(100);
}

void lcdInit()
{
	ETC_DDR = 0x0F;
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	81 bb       	out	0x11, r24	; 17
	LCD_DDR = 0xFF;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	87 bb       	out	0x17, r24	; 23
	ETC_OUT = 0x00;
 18c:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f ec       	ldi	r24, 0xCF	; 207
 190:	97 e0       	ldi	r25, 0x07	; 7
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcdInit+0xe>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcdInit+0x14>
 198:	00 00       	nop
	_delay_ms(1);
	
	lcdCommand(0x34);
 19a:	84 e3       	ldi	r24, 0x34	; 52
 19c:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
	lcdCommand(0x0F);
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
	lcdCommand(0x01);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
 1ac:	8f ec       	ldi	r24, 0xCF	; 207
 1ae:	97 e0       	ldi	r25, 0x07	; 7
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcdInit+0x2c>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcdInit+0x32>
 1b6:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x06);
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
 1be:	08 95       	ret

000001c0 <lcdType>:
}

void lcdType( unsigned char letter )
{
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	89 83       	std	Y+1, r24	; 0x01
	if ( letter == '*' )
 1ce:	18 2f       	mov	r17, r24
 1d0:	8a 32       	cpi	r24, 0x2A	; 42
 1d2:	31 f5       	brne	.+76     	; 0x220 <lcdType+0x60>
	{
		if (strlen(inPass) == 0)
 1d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1d8:	81 11       	cpse	r24, r1
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <lcdType+0x24>
		{
			lcdCommand(2);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
			return;
 1e2:	5b c0       	rjmp	.+182    	; 0x29a <lcdType+0xda>
		}
			
		inPass[strlen(inPass)-1] = '\0';
 1e4:	e4 e7       	ldi	r30, 0x74	; 116
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	01 90       	ld	r0, Z+
 1ea:	00 20       	and	r0, r0
 1ec:	e9 f7       	brne	.-6      	; 0x1e8 <lcdType+0x28>
 1ee:	32 97       	sbiw	r30, 0x02	; 2
 1f0:	10 82       	st	Z, r1
		lcdCommand(0x10);
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
		LCD_OUT = 0x20;
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	88 bb       	out	0x18, r24	; 24
		ETC_OUT = 0x05;
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <lcdType+0x42>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcdType+0x48>
		_delay_us(1);
		ETC_OUT = 0x04;
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	a7 ec       	ldi	r26, 0xC7	; 199
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	11 97       	sbiw	r26, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcdType+0x50>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcdType+0x56>
 216:	00 00       	nop
		_delay_us(100);
		lcdCommand(0x10);
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
		return;
 21e:	3d c0       	rjmp	.+122    	; 0x29a <lcdType+0xda>
	}
	else if ( letter == '#' )
 220:	83 32       	cpi	r24, 0x23	; 35
 222:	19 f5       	brne	.+70     	; 0x26a <lcdType+0xaa>
	{
		lcdCommand(1);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
		lcdCommand(2);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 b3 00 	call	0x166	; 0x166 <lcdCommand>
		if ( passwordCheck() == '1')
 230:	0e 94 49 00 	call	0x92	; 0x92 <passwordCheck>
 234:	81 33       	cpi	r24, 0x31	; 49
 236:	89 f4       	brne	.+34     	; 0x25a <lcdType+0x9a>
		{
			unsigned char y,e,s;
			y = 'Y'; e = 'E' ; s = 'S';
			lcdType(y);
 238:	89 e5       	ldi	r24, 0x59	; 89
 23a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcdType>
			lcdType(e);
 23e:	85 e4       	ldi	r24, 0x45	; 69
 240:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcdType>
			lcdType(s);
 244:	83 e5       	ldi	r24, 0x53	; 83
 246:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcdType>
			ETC_OUT = 0x0C;
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	82 bb       	out	0x12, r24	; 18
			login = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <login+0x1>
 256:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <login>
		}
		memset(inPass,'\0',sizeof(inPass));
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	e4 e7       	ldi	r30, 0x74	; 116
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	df 01       	movw	r26, r30
 262:	1d 92       	st	X+, r1
 264:	8a 95       	dec	r24
 266:	e9 f7       	brne	.-6      	; 0x262 <lcdType+0xa2>
		return;
 268:	18 c0       	rjmp	.+48     	; 0x29a <lcdType+0xda>
	}
	else
	{
		strncat(inPass,&letter,1);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	be 01       	movw	r22, r28
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	84 e7       	ldi	r24, 0x74	; 116
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 78 01 	call	0x2f0	; 0x2f0 <strncat>
		LCD_OUT = letter;
 27c:	18 bb       	out	0x18, r17	; 24
		ETC_OUT = 0x05;
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	82 bb       	out	0x12, r24	; 18
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	ba 95       	dec	r27
 286:	f1 f7       	brne	.-4      	; 0x284 <lcdType+0xc4>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcdType+0xca>
		_delay_us(1);
		ETC_OUT = 0x04;
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	87 ec       	ldi	r24, 0xC7	; 199
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcdType+0xd2>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcdType+0xd8>
 298:	00 00       	nop
		_delay_us(100);
	}
}
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
	DDRC = 0xFF;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	84 bb       	out	0x14, r24	; 20
	ETC_OUT =0x0F;
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	82 bb       	out	0x12, r24	; 18
	
	KEY_DDR = 0x1F;
 2ac:	8f e1       	ldi	r24, 0x1F	; 31
 2ae:	8a bb       	out	0x1a, r24	; 26
	lcdInit();
 2b0:	0e 94 c2 00 	call	0x184	; 0x184 <lcdInit>
	unsigned char letter;

    while (1) 
    {
		PORTC = login;
 2b4:	0c e7       	ldi	r16, 0x7C	; 124
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	f8 01       	movw	r30, r16
 2ba:	80 81       	ld	r24, Z
 2bc:	85 bb       	out	0x15, r24	; 21
		if ( login == 0 )
 2be:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <login>
 2c2:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <login+0x1>
 2c6:	89 2b       	or	r24, r25
 2c8:	b9 f7       	brne	.-18     	; 0x2b8 <main+0x14>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	8f ed       	ldi	r24, 0xDF	; 223
 2d0:	9e e2       	ldi	r25, 0x2E	; 46
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x2e>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x34>
 2d8:	00 00       	nop
		{
			
			for ( int i = 0 ; i < 4 ; i++ )
			{
				_delay_ms(6);
				letter = letterReader(i);
 2da:	ce 01       	movw	r24, r28
 2dc:	0e 94 62 00 	call	0xc4	; 0xc4 <letterReader>
				if(letter != 0)
 2e0:	81 11       	cpse	r24, r1
					lcdType(letter);
 2e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcdType>
    {
		PORTC = login;
		if ( login == 0 )
		{
			
			for ( int i = 0 ; i < 4 ; i++ )
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	c4 30       	cpi	r28, 0x04	; 4
 2ea:	d1 05       	cpc	r29, r1
 2ec:	81 f7       	brne	.-32     	; 0x2ce <main+0x2a>
 2ee:	e4 cf       	rjmp	.-56     	; 0x2b8 <main+0x14>

000002f0 <strncat>:
 2f0:	fb 01       	movw	r30, r22
 2f2:	dc 01       	movw	r26, r24
 2f4:	0d 90       	ld	r0, X+
 2f6:	00 20       	and	r0, r0
 2f8:	e9 f7       	brne	.-6      	; 0x2f4 <strncat+0x4>
 2fa:	11 97       	sbiw	r26, 0x01	; 1
 2fc:	41 50       	subi	r20, 0x01	; 1
 2fe:	50 40       	sbci	r21, 0x00	; 0
 300:	28 f0       	brcs	.+10     	; 0x30c <strncat+0x1c>
 302:	01 90       	ld	r0, Z+
 304:	00 20       	and	r0, r0
 306:	0d 92       	st	X+, r0
 308:	c9 f7       	brne	.-14     	; 0x2fc <strncat+0xc>
 30a:	08 95       	ret
 30c:	1c 92       	st	X, r1
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
