
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000908  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  7a:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <letterReader>:
#define		LCD1_DDR DDRB
#define		LCD1_OUT PORTB
#define		LCD1_IN	 PINB

unsigned char letterReader( int row )
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2c 97       	sbiw	r28, 0x0c	; 12
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	ac 01       	movw	r20, r24
	unsigned char table [4][3] = {{'1','2','3'},
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	e0 e6       	ldi	r30, 0x60	; 96
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	de 01       	movw	r26, r28
  a0:	11 96       	adiw	r26, 0x01	; 1
  a2:	01 90       	ld	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	8a 95       	dec	r24
  a8:	e1 f7       	brne	.-8      	; 0xa2 <letterReader+0x20>
								  {'4','5','6'},
								  {'7','8','9'},
								  {'*','0','#'}};
		
	KEY_ROW = ~(1<<row);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	04 2e       	mov	r0, r20
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <letterReader+0x34>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <letterReader+0x30>
  ba:	20 95       	com	r18
  bc:	2b bb       	out	0x1b, r18	; 27
	unsigned int column = (KEY_COL & 0xE0)>>5;
  be:	99 b3       	in	r25, 0x19	; 25
	unsigned char letter;
	switch(column)
  c0:	92 95       	swap	r25
  c2:	96 95       	lsr	r25
  c4:	97 70       	andi	r25, 0x07	; 7
  c6:	95 30       	cpi	r25, 0x05	; 5
  c8:	79 f0       	breq	.+30     	; 0xe8 <letterReader+0x66>
  ca:	96 30       	cpi	r25, 0x06	; 6
  cc:	19 f0       	breq	.+6      	; 0xd4 <letterReader+0x52>
  ce:	93 30       	cpi	r25, 0x03	; 3
  d0:	f9 f4       	brne	.+62     	; 0x110 <letterReader+0x8e>
  d2:	14 c0       	rjmp	.+40     	; 0xfc <letterReader+0x7a>
			letter = 0;
			return letter;
		}
		case(6):
		{
			letter = table[row][2];
  d4:	fa 01       	movw	r30, r20
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	4e 0f       	add	r20, r30
  dc:	5f 1f       	adc	r21, r31
  de:	fe 01       	movw	r30, r28
  e0:	e4 0f       	add	r30, r20
  e2:	f5 1f       	adc	r31, r21
  e4:	83 81       	ldd	r24, Z+3	; 0x03
			return letter;
  e6:	15 c0       	rjmp	.+42     	; 0x112 <letterReader+0x90>
		}
		case(5):
		{
			letter = table[row][1];
  e8:	fa 01       	movw	r30, r20
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	4e 0f       	add	r20, r30
  f0:	5f 1f       	adc	r21, r31
  f2:	fe 01       	movw	r30, r28
  f4:	e4 0f       	add	r30, r20
  f6:	f5 1f       	adc	r31, r21
  f8:	82 81       	ldd	r24, Z+2	; 0x02
			return letter;
  fa:	0b c0       	rjmp	.+22     	; 0x112 <letterReader+0x90>
		}
		case(3):
		{
			letter = table[row][0];
  fc:	fa 01       	movw	r30, r20
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	4e 0f       	add	r20, r30
 104:	5f 1f       	adc	r21, r31
 106:	fe 01       	movw	r30, r28
 108:	e4 0f       	add	r30, r20
 10a:	f5 1f       	adc	r31, r21
 10c:	81 81       	ldd	r24, Z+1	; 0x01
			return letter;
 10e:	01 c0       	rjmp	.+2      	; 0x112 <letterReader+0x90>
	switch(column)
	{
		case(7):
		{
			letter = 0;
			return letter;
 110:	80 e0       	ldi	r24, 0x00	; 0
			letter = table[row][0];
			return letter;
		}
	}
	return 0;
}
 112:	2c 96       	adiw	r28, 0x0c	; 12
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <lcdLoginCommand>:

void lcdLoginCommand( unsigned char cmd )
{
	LCD1_OUT = cmd;
 124:	88 bb       	out	0x18, r24	; 24
	PORTD = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcdLoginCommand+0x8>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcdLoginCommand+0xe>
	_delay_us(1);
	PORTD = 0;
 132:	12 ba       	out	0x12, r1	; 18
 134:	87 ec       	ldi	r24, 0xC7	; 199
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcdLoginCommand+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcdLoginCommand+0x1a>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <lcdLoginInit>:
	_delay_us(100);
}

void lcdLoginInit()
{
	DDRD = 0x07;
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	81 bb       	out	0x11, r24	; 17
	LCD1_DDR = 0xFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 bb       	out	0x17, r24	; 23
	PORTD = 0;
 14a:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	8f ec       	ldi	r24, 0xCF	; 207
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcdLoginInit+0xe>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcdLoginInit+0x14>
 156:	00 00       	nop
	_delay_ms(1);
	
	lcdLoginCommand(0x34);
 158:	84 e3       	ldi	r24, 0x34	; 52
 15a:	0e 94 92 00 	call	0x124	; 0x124 <lcdLoginCommand>
	lcdLoginCommand(0x0F);
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	0e 94 92 00 	call	0x124	; 0x124 <lcdLoginCommand>
	lcdLoginCommand(0x01);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 92 00 	call	0x124	; 0x124 <lcdLoginCommand>
 16a:	8f ec       	ldi	r24, 0xCF	; 207
 16c:	97 e0       	ldi	r25, 0x07	; 7
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcdLoginInit+0x2c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcdLoginInit+0x32>
 174:	00 00       	nop
	_delay_ms(1);
	lcdLoginCommand(0x06);
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 92 00 	call	0x124	; 0x124 <lcdLoginCommand>
 17c:	08 95       	ret

0000017e <lcdLoginType>:
}

void lcdLoginType( unsigned char letter )
{
	LCD1_OUT = letter;
 17e:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b101;
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <lcdLoginType+0x8>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcdLoginType+0xe>
	_delay_us(1);
	PORTD = 0b100;
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	82 bb       	out	0x12, r24	; 18
 190:	87 ec       	ldi	r24, 0xC7	; 199
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcdLoginType+0x16>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcdLoginType+0x1c>
 19a:	00 00       	nop
 19c:	08 95       	ret

0000019e <main>:
	_delay_us(100);
}

int main(void)
{
	DDRC = 0xFF;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	84 bb       	out	0x14, r24	; 20
	
	unsigned int login = 0;
	KEY_DDR = 0x1F;
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	8a bb       	out	0x1a, r24	; 26
	lcdLoginInit();
 1a6:	0e 94 a1 00 	call	0x142	; 0x142 <lcdLoginInit>
    while (1) 
    {
		if ( login == 0 )
		{
			
			for ( int i = 0 ; i < 4 ; i++ )
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	8f ed       	ldi	r24, 0xDF	; 223
 1b0:	9e e2       	ldi	r25, 0x2E	; 46
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x14>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x1a>
 1b8:	00 00       	nop
			{
				_delay_ms(6);
				letter = letterReader(i);
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 41 00 	call	0x82	; 0x82 <letterReader>
				PORTC = letter;
 1c0:	85 bb       	out	0x15, r24	; 21
				if(letter != 0)
 1c2:	81 11       	cpse	r24, r1
					lcdLoginType(letter);
 1c4:	0e 94 bf 00 	call	0x17e	; 0x17e <lcdLoginType>
    while (1) 
    {
		if ( login == 0 )
		{
			
			for ( int i = 0 ; i < 4 ; i++ )
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	d1 05       	cpc	r29, r1
 1ce:	79 f7       	brne	.-34     	; 0x1ae <main+0x10>
 1d0:	ec cf       	rjmp	.-40     	; 0x1aa <main+0xc>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
